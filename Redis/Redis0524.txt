第二章：Redis入门
1.获得符合规则的键名列表
	key pattern
	其中pattern支持glob风格通配符格式
	？	匹配一个字符
	*	匹配任意个（包括0个）字符
	[]	匹配括号间的任一字符，可以使用“-”表示一个范围
	\x	匹配字符x，用于转义，如要匹配“？”就需要使用\?
2.keys *:能够获得Redis中所有的键，当键的数量比较多时就会影响性能，不建议在生产环境中使用
3.Redis不区分大小写
4.判断一个键是否存在：exists  key,如果键存在返回整数类型1，否则返回0
5.删除键：del key [key ...]:可以删除一个或多个键，返回值是删除的键的个数
  del命令的参数不支持通配符，但我们可以结合Linux的管道和xargs命令自己实现删除所有符合规则的键
6.获得键值的数结构：type key,返回值可能是string、hash、list、set、zset

主题：键值数据类型
	一、字符串类型
	字符串是Redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据。可以存储用户邮箱
	、JSON化的对象甚至是一张照片，一个字符串类型的键允许存储的数据的最大容量是512M
	命令：
		1.赋值与取值：set key value、get key
		  当键不存在时会返回空结果
		2.自增数字：incr key
		  字符串可存储任何形式的字符串类型，当存储的字符串是整数类型时，Redis提供了一个实用的
		  的命令incr，其作用是让当前键值递增，并返回递增后的值
		  作用：可以统计文章的访问量、生成自增ID、存储文章数据
		3.所有的Redis命令都是原子操作
		4.增加指定的整数：incrby key increment
		5.减少指定的整数：decr key 与decrby key decrement
		6.增加指定的浮点数：incrbyfloat key increment
		7.向尾部追加值：append key value
		8.获取字符串长度：strlen key	注意中文
		9.同时获得/设置多个键值：mget key [key...]、mset key value [key value ...]
		10.位操作：
		   getbit key offset:获得一个字符串类型键指定位置的二进制位的值（0或1），索引从0开始，超过了键值长度，默认值为0
		   setbit key offset value：设置字符串类型值指定位置的二进制位的值，返回值是该位置的旧值，超过了长度，会将中间的二进制为设置为0
		   bitcount key [start] [end]：可以获得字符串中1的二进制个数start、end为限制的字节数
		   bitop operation destkey key [key ...]：可以对多个字符串类型键进行位运算，并将结果存储在destkey参数指定的键中。bitop命令支持的
		   运算有and、or、xor和not(与、或、异或、非)
		11.bitops key 0|1：可以获取指定键的第一个位值是0或1的位置
		12.bitops key 0|1 start end
		13.一个有趣的现象：如果不设置结束字节且键值的所有二进制位都是1，则当要查询值为0的二进制位偏移量时，返回结果会是键值长度的下一位字位的
			偏移量，因为Redis会认为键值长度之后的二进制位都是0
		14.使用setbit命令时，如果当前键的键值长度小于要设置的二进制位的偏移量时，redis会自动分配内存并将键值的当前长度到指定的偏移量之间的二进制
		   位都设置位0，如果分配的内存过大，则很可能会造成服务器的暂时阻塞
	二、散列类型
		散列类型（hash）的键值也是一种字典结构，其存储了字段（field）和字段值的映射，但字段值只能是字符串，不支持其他数据类型，换句话说，散列
		类型不能嵌套其他的数据类型。一个散列类型键可以至多包含2^23 - 1字段。
		除了散列类型，redis的其他数据类型同样不支持数据类型的嵌套，比如集合类型每个元素只能是字符串
		
		命令：
		1.赋值与取值：
			hset key field value
			hget key field
			hmset key field value [field value...]
			hmget key field [field...]
			hgetall key：如果想获取所有字段和字段值却不知道键中有哪些字段，可以使用hgetall
		hset命令的方便之处在于不区分插入和更新操作，当hset操作的时候，之前字段存在则会返回0，不存在会返回1
		当然，键本身不存在时，hset命令还会自动创建它
		2.Redis中每个键都属于一个明确的数据类型，如通过hset命令建立的键就是散列类型，通过set命令建立的键就
		是字符串类型...使用一种数据类型的命令去操作另一种数据类型的键会提示错误
		3.判断字段是否存在：hexists key field,存在则返回1，不存在返回0，如果键不存在也会返回0
		4.当字段不存在时赋值：hsetnx key field value,与hset命令类似，区别在于如果字段已经存在，hsetnx命令
			将不执行任何操作
		5.增加数字：hincrby key field increment
			hincrby person score 60 : 之前的person键不存在，hincrby命令去自动建立键并默认score字段在执行
			命令前的值为0，命令返回值是增加后的字段值
		6.删除字段：hdel key field [field...]:返回值是被删除的字段个数

















	